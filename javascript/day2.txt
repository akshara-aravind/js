*****scope*****
1.var a = 12;
 (function() {
  console.log(a);
 })();
 output will be 12.

2.var a = 5;
(function() {
  var a = 12;
  console.log(a);
})();
a=12 because inside the functiona is again declared as 12.

3.var a = 10;
var x = (function() {
  var a = 12;
  return (function() {
    console.log(a);
  });
})();
x();
output will be 12.

4.var a = 10;
var x = (function() {
  var y = function() {
    var a = 12;
  };
  return function() {
    console.log(a);
  }
})();
x();
output will be 12.

5.var a = 10;
var x = (function() {
  (function() {
    a = 12; // <<< look carefully at this line.
  })();
  return (function() {
    console.log(a);
  });
})();
x();
output will be 12.

6.var a = 10;
(function() {
  var a = 15;
  window.x = function() {
    console.log(a);
  }
})();
x();
output will be 15.


****Arrays****

1.Arrays are passed by reference.
let arr=[1,2,3,4];
let modarr=arr =>{
  arr[4]=5;
};
modarr(arr);
console.log(arr[5]);

2.fucntion duplicate(){
const arr=['a','b','c'];
const arr2=arr.slice();
}

3.shift:removes the first element in the array.
unshift:add a element to the array at beginning.
slice:a part of array, while original array is not modified.
splice:Modifies an array by inserting, deleting, and/or replacing array elements then returns an array of deleted elements.
pop:Removes the last element of an array.

*****loops****

1.for(let i=5;i>0;i--){
    console.log(i);
}

2.for ... of loops iterate over the values in order. for ... in loops actually loop over the enumerable properties of an object.

****iterators****

1.const numbers=[2,4,6,8,10];
const square=numbers.map(numbers=>{
    return numbers*numbers;
});

2.const arr=[1, ""two"", 3, ""four"", 5, ""Six"", 7, ""Eight"", 9, ""Ten""];
const str=arr.filter(arr=>{
    return typtOf arr==='String';
})

3.const arr=[1,3,5,7,9];
const sum=arr.reduce((accumulator, currentValue) => {
  return accumulator + currentValue;
});




