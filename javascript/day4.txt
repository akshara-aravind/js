****promises*****
1.There are three promises states:
   pending: initial state, neither fulfilled nor rejected.
   fulfilled: meaning that the operation was completed successfully.
   rejected: meaning that the operation failed.

2.let str='BEAUTIFUL CODE';
let p=new Promise((resolve,reject)=>{
    setTimeout(()=>{
        resolve(str.toLowerCase());
    },5*1000);
});
p.then((result)=>{
    console.log(result);
});

3.let p = new Promise((resolve, reject) => {
    setTimeout(() => {
        resolve(str.toLowerCase());
    }, 5 * 1000);
});

p.then((result) => {
    console.log(result);
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(result.length);
        }, 5 * 1000);
    });
}).then(result => console.log(result));


****async and await
1. Rewrite the below using Async-Await syntax

function getProcessedData(url) {
  return downloadData(url) // returns a promise
    .catch(e => {
      return downloadFallbackData(url)  // returns a promise
    })
    .then(v => {
      return processDataInWorker(v)  // returns a promise
    })
}

async function getProcessedData(url) {
    try{
        let ak=await downloadData(url);
        retrun downloadFallbackData(ak);
    }
  catch {
      return processDataInWorker(ak) ;
    }
}


